{"version":3,"sources":["Components/AddUser.js","Components/Table.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","paper","marginTop","spacing","display","flexDirection","alignItems","avatar","margin","backgroundColor","palette","secondary","main","form","width","submit","textField","marginLeft","marginRight","AddUser","classes","React","useState","firstLoad","setLoad","Date","selectedDate","setSelectedDate","name","setName","company","setCompany","gender","setGender","message","setMessage","toInput","a","fetch","method","mode","cache","credentials","headers","redirect","referrerPolicy","body","JSON","stringify","response","json","console","log","id","Container","component","maxWidth","CssBaseline","className","Avatar","Typography","variant","noValidate","Grid","container","item","xs","TextField","required","fullWidth","value","label","autoComplete","onChange","event","target","sm","type","defaultValue","InputLabelProps","shrink","date","Button","color","preventDefault","onClick","variables","sampleFunc","dob","justify","to","style","table","minWidth","justifyContent","height","link","textDecoration","alignSelf","SimpleTable","data","upDateData","isLoading","length","CircularProgress","TableContainer","Paper","Table","aria-label","TableHead","TableRow","TableCell","align","TableBody","map","row","key","App","exact","path","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"wYAkBMA,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACrCC,MAAO,CACLC,UAAWF,EAAMG,QAAQ,GACzBC,QAAS,OACTC,cAAe,SACfC,WAAY,UAEdC,OAAQ,CACNC,OAAQR,EAAMG,QAAQ,GACtBM,gBAAiBT,EAAMU,QAAQC,UAAUC,MAE3CC,KAAM,CACJC,MAAO,OACPZ,UAAWF,EAAMG,QAAQ,IAE3BY,OAAQ,CACNP,OAAQR,EAAMG,QAAQ,EAAG,EAAG,IAE9Ba,UAAW,CACTC,WAAYjB,EAAMG,QAAQ,GAC1Be,YAAalB,EAAMG,QAAQ,GAC3BW,MAAO,YAII,SAASK,IACtB,IAAMC,EAAUtB,IADgB,EAEHuB,IAAMC,UAAS,GAFZ,mBAEzBC,EAFyB,KAEdC,EAFc,OAIQH,IAAMC,SAC5C,IAAIG,KAAK,wBALqB,mBAIzBC,EAJyB,KAIXC,EAJW,OAORN,IAAMC,SAAS,IAPP,mBAOzBM,EAPyB,KAOnBC,EAPmB,OAQFR,IAAMC,SAAS,IARb,mBAQzBQ,EARyB,KAQhBC,EARgB,OASJV,IAAMC,SAAS,IATX,mBASzBU,EATyB,KASjBC,EATiB,OAgBFZ,IAAMC,SAAS,gCAhBb,mBAgBzBY,EAhByB,KAgBhBC,EAhBgB,iDAkBhC,WAA0BC,GAA1B,iBAAAC,EAAA,sEACyBC,MAAM,YAAa,CACxCC,OAAQ,OACRC,KAAM,OACNC,MAAO,WACPC,YAAa,cACbC,QAAS,CACP,eAAgB,oBAGlBC,SAAU,SACVC,eAAgB,cAChBC,KAAMC,KAAKC,UAAUZ,KAZzB,cACQa,EADR,gBAcmBA,EAASC,OAd5B,OAcMJ,EAdN,OAeEK,QAAQC,IAAIN,EAAKO,IACjBlB,EAAWW,EAAKO,GAAK,2BAA6B,wBAhBpD,4CAlBgC,sBAkDhC,OALI9B,GAEFC,GAAQ,GAIR,kBAAC8B,EAAA,EAAD,CAAWC,UAAU,OAAOC,SAAS,MACnC,kBAACC,EAAA,EAAD,MACA,yBAAKC,UAAWtC,EAAQnB,OACtB,kBAAC0D,EAAA,EAAD,CAAQD,UAAWtC,EAAQb,QACzB,kBAAC,IAAD,OAEF,kBAACqD,EAAA,EAAD,CAAYL,UAAU,KAAKM,QAAQ,MAAnC,kBAGA,0BAAMH,UAAWtC,EAAQP,KAAMiD,YAAU,GACvC,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAAC7D,QAAS,GACvB,kBAAC4D,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,IACb,kBAACC,EAAA,EAAD,CACEN,QAAQ,WACRO,UAAQ,EACRC,WAAS,EACThB,GAAG,OACHiB,MAAO1C,EACP2C,MAAM,OACN3C,KAAK,OACL4C,aAAa,OACbC,SA5DW,SAAAC,GAAK,OAAI7C,EAAQ6C,EAAMC,OAAOL,WA+D7C,kBAACP,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIU,GAAI,GACrB,kBAACT,EAAA,EAAD,CACEK,aAAa,UACb5C,KAAK,UACLiC,QAAQ,WACRO,UAAQ,EACRC,WAAS,EACTC,MAAOxC,EACPuB,GAAG,UACHkB,MAAM,UACNE,SAxEc,SAAAC,GAAK,OAAI3C,EAAW2C,EAAMC,OAAOL,WA2EnD,kBAACP,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIU,GAAI,GACrB,kBAACT,EAAA,EAAD,CACEN,QAAQ,WACRO,UAAQ,EACRC,WAAS,EACThB,GAAG,SACHiB,MAAOtC,EACPuC,MAAM,SACN3C,KAAK,SACL4C,aAAa,SACbC,SApFa,SAAAC,GAAK,OAAIzC,EAAUyC,EAAMC,OAAOL,WAuFjD,kBAACP,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,IACb,kBAACC,EAAA,EAAD,CACEd,GAAG,OACHkB,MAAM,gBACNM,KAAK,OACLC,aAAa,aACbpB,UAAWtC,EAAQJ,UACnB+D,gBAAiB,CACfC,QAAQ,GAEVP,SApGW,SAAAQ,GAAI,OAAItD,EAAgBsD,QAwGzC,kBAACC,EAAA,EAAD,CAEEb,WAAS,EACTR,QAAQ,YACRsB,MAAM,UACNC,gBAAc,EACd1B,UAAWtC,EAAQL,OACnBsE,QArFW,SAAAC,IArCW,oCAuC9BC,CADgB,CAAE3D,OAAME,UAASE,SAAQwD,IAAK9D,IAE9CG,EAAQ,IACRE,EAAW,IACXE,EAAU,MAyEJ,QAYA,kBAAC8B,EAAA,EAAD,CAAMC,WAAS,EAACyB,QAAQ,UACtB,kBAAC1B,EAAA,EAAD,CAAME,MAAI,GACR,kBAAC,IAAD,CAAMyB,GAAG,SAAT,wBAIN,kBAAC9B,EAAA,EAAD,CAAY+B,MAAO,CAAEnF,OAAQ,GAAKqD,QAAQ,SAA1C,WACW3B,K,oFC5JbpC,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACrC4F,MAAO,CACLC,SAAU,KAEZtF,OAAQ,CACNC,OAAQR,EAAMG,QAAQ,GACtBM,gBAAiBT,EAAMU,QAAQC,UAAUC,MAE3CX,MAAO,CACLG,QAAS,OACTC,cAAe,SACfyF,eAAgB,SAChBxF,WAAY,SACZE,OAAO,OACPuF,OAAQ,OACRjF,MAAO,MACPZ,UAAWF,EAAMG,QAAQ,IAE3B6F,KAAM,CACJb,MAAO,mBACPc,eAAgB,OAChBhF,WAAY,MACZiF,UAAW,aACX,UAAW,CACTf,MAAO,sBAKE,SAASgB,IACtB,IAAM/E,EAAUtB,IADoB,EAGTuB,IAAMC,SAAS,IAHN,mBAG7B8E,EAH6B,KAGvBC,EAHuB,OAIPhF,IAAMC,UAAS,GAJR,mBAI7BC,EAJ6B,KAIlBC,EAJkB,KAKhC8E,GAAY,EALoB,4CAOpC,8BAAAjE,EAAA,sEACuBC,MAAM,aAD7B,cACMW,EADN,gBAEmBA,EAASC,OAF5B,OAEMJ,EAFN,OAGEuD,EAAWvD,GAHb,4CAPoC,sBAoBpC,OAPIvB,KAbgC,mCAclCgE,GACA/D,GAAQ,IAGN4E,EAAKG,OAAS,IAAGD,GAAY,GAG/B,yBAAK5C,UAAWtC,EAAQnB,OACtB,kBAAC0D,EAAA,EAAD,CAAQD,UAAWtC,EAAQb,QACzB,kBAAC,IAAD,OAEF,kBAACqD,EAAA,EAAD,CAAYL,UAAU,KAAKM,QAAQ,MAAnC,kBAICyC,EACC,kBAACE,EAAA,EAAD,MAEA,kBAACC,EAAA,EAAD,CACEd,MAAO,CAAE7E,MAAO,MAAON,OAAQ,UAC/B+C,UAAWmD,KAEX,kBAACC,EAAA,EAAD,CAAOjD,UAAWtC,EAAQwE,MAAOgB,aAAW,gBAC1C,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAWC,MAAM,UAAjB,QACA,kBAACD,EAAA,EAAD,CAAWC,MAAM,UAAjB,WACA,kBAACD,EAAA,EAAD,CAAWC,MAAM,UAAjB,UACA,kBAACD,EAAA,EAAD,CAAWC,MAAM,UAAjB,SAGJ,kBAACC,EAAA,EAAD,YACGb,QADH,IACGA,OADH,EACGA,EAAMc,KAAI,SAAAC,GAAG,OACZ,kBAACL,EAAA,EAAD,CAAUM,IAAKD,EAAIvF,MACjB,kBAACmF,EAAA,EAAD,CAAWC,MAAM,UAAUG,EAAIvF,MAC/B,kBAACmF,EAAA,EAAD,CAAWC,MAAM,UAAUG,EAAIrF,SAC/B,kBAACiF,EAAA,EAAD,CAAWC,MAAM,UAAUG,EAAInF,QAC/B,kBAAC+E,EAAA,EAAD,CAAWC,MAAM,UAAUG,EAAI3B,YAO3C,kBAAC,IAAD,CAAM9B,UAAWtC,EAAQ4E,KAAMN,GAAG,KAC/B,IACD,kBAAC9B,EAAA,EAAD,CAAYoD,MAAM,QAAlB,iCAEc,M,UC9FPK,E,uKATX,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIhE,UAAWpC,IACjC,kBAAC,IAAD,CAAOmG,OAAK,EAACC,KAAK,QAAQhE,UAAWoD,S,GAL3Ba,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvF,QAAQuF,MAAMA,EAAMxG,c","file":"static/js/main.b563299c.chunk.js","sourcesContent":["/**\r\n * The entry point for the app.\r\n Have a form in the file that will retrieve the info from user and do a post request\r\n to store instanceof. Use react hooks to store various values in the form\r\n *  */\r\n\r\nimport React from \"react\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport GroupIcon from \"@material-ui/icons/Group\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Container from \"@material-ui/core/Container\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  paper: {\r\n    marginTop: theme.spacing(7),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\"\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.secondary.main\r\n  },\r\n  form: {\r\n    width: \"100%\", // Fix IE 11 issue.\r\n    marginTop: theme.spacing(3)\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2)\r\n  },\r\n  textField: {\r\n    marginLeft: theme.spacing(1),\r\n    marginRight: theme.spacing(1),\r\n    width: \"100%\"\r\n  }\r\n}));\r\n\r\nexport default function AddUser() {\r\n  const classes = useStyles();\r\n  const [firstLoad, setLoad] = React.useState(true);\r\n\r\n  const [selectedDate, setSelectedDate] = React.useState(\r\n    new Date(\"1998-04-02T21:11:54\")\r\n  );\r\n  const [name, setName] = React.useState(\"\");\r\n  const [company, setCompany] = React.useState(\"\");\r\n  const [gender, setGender] = React.useState(\"\");\r\n\r\n  const handleDateChange = date => setSelectedDate(date);\r\n  const handleNameChange = event => setName(event.target.value);\r\n  const handleCompanyChange = event => setCompany(event.target.value);\r\n  const handleGenderChange = event => setGender(event.target.value);\r\n\r\n  const [message, setMessage] = React.useState(\"Nothing saved in the session\");\r\n\r\n  async function sampleFunc(toInput) {\r\n    const response = await fetch(\"/api/User\", {\r\n      method: \"POST\", // *GET, POST, PUT, DELETE, etc.\r\n      mode: \"cors\", // no-cors, *cors, same-origin\r\n      cache: \"no-cache\", // *default, no-cache, reload, force-cache, only-if-cached\r\n      credentials: \"same-origin\", // include, *same-origin, omit\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n        // 'Content-Type': 'application/x-www-form-urlencoded',\r\n      },\r\n      redirect: \"follow\", // manual, *follow, error\r\n      referrerPolicy: \"no-referrer\", // no-referrer, *client\r\n      body: JSON.stringify(toInput) // body data type must match \"Content-Type\" header\r\n    });\r\n    let body = await response.json();\r\n    console.log(body.id);\r\n    setMessage(body.id ? \"Data sucessfully updated\" : \"Data updation failed\");\r\n  }\r\n\r\n  const handleSubmit = variables => {\r\n    const toInput = { name, company, gender, dob: selectedDate };\r\n    sampleFunc(toInput);\r\n    setName(\"\");\r\n    setCompany(\"\");\r\n    setGender(\"\");\r\n  };\r\n\r\n  if (firstLoad) {\r\n    // sampleFunc();\r\n    setLoad(false);\r\n  }\r\n\r\n  return (\r\n    <Container component=\"main\" maxWidth=\"xs\">\r\n      <CssBaseline />\r\n      <div className={classes.paper}>\r\n        <Avatar className={classes.avatar}>\r\n          <GroupIcon />\r\n        </Avatar>\r\n        <Typography component=\"h1\" variant=\"h5\">\r\n          User Directory\r\n        </Typography>\r\n        <form className={classes.form} noValidate>\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                variant=\"outlined\"\r\n                required\r\n                fullWidth\r\n                id=\"name\"\r\n                value={name}\r\n                label=\"Name\"\r\n                name=\"name\"\r\n                autoComplete=\"name\"\r\n                onChange={handleNameChange}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12} sm={6}>\r\n              <TextField\r\n                autoComplete=\"company\"\r\n                name=\"company\"\r\n                variant=\"outlined\"\r\n                required\r\n                fullWidth\r\n                value={company}\r\n                id=\"company\"\r\n                label=\"company\"\r\n                onChange={handleCompanyChange}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12} sm={6}>\r\n              <TextField\r\n                variant=\"outlined\"\r\n                required\r\n                fullWidth\r\n                id=\"gender\"\r\n                value={gender}\r\n                label=\"Gender\"\r\n                name=\"gender\"\r\n                autoComplete=\"gender\"\r\n                onChange={handleGenderChange}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                id=\"date\"\r\n                label=\"Date of birth\"\r\n                type=\"date\"\r\n                defaultValue=\"1998-04-02\"\r\n                className={classes.textField}\r\n                InputLabelProps={{\r\n                  shrink: true\r\n                }}\r\n                onChange={handleDateChange}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n          <Button\r\n            // type=\"submit\"\r\n            fullWidth\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            preventDefault\r\n            className={classes.submit}\r\n            onClick={handleSubmit}\r\n          >\r\n            Save\r\n          </Button>\r\n\r\n          <Grid container justify=\"center\">\r\n            <Grid item>\r\n              <Link to=\"/view\">View User Records</Link>\r\n            </Grid>\r\n          </Grid>\r\n        </form>\r\n        <Typography style={{ margin: 7 }} variant=\"body1\">\r\n          Status: {message}\r\n        </Typography>\r\n      </div>\r\n    </Container>\r\n  );\r\n}","/**\r\n * This file contains the deatils of all the entries in the app.\r\n * Make a get request to get all the entries and display in a table.\r\n * \r\n */\r\n\r\nimport React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport GroupIcon from \"@material-ui/icons/Group\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  table: {\r\n    minWidth: 600\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.secondary.main\r\n  },\r\n  paper: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    margin: `10px`,\r\n    height: \"100%\",\r\n    width: \"99%\",\r\n    marginTop: theme.spacing(7)\r\n  },\r\n  link: {\r\n    color: \"rgba(0,0,0,0.65)\",\r\n    textDecoration: \"none\",\r\n    marginLeft: \"10%\",\r\n    alignSelf: \"flex-start\",\r\n    \"&:hover\": {\r\n      color: \"rgba(0,0,0,1)\"\r\n    }\r\n  }\r\n}));\r\n\r\nexport default function SimpleTable() {\r\n  const classes = useStyles();\r\n\r\n  const [data, upDateData] = React.useState([]);\r\n  const [firstLoad, setLoad] = React.useState(true);\r\n  let isLoading = true;\r\n\r\n  async function sampleFunc() {\r\n    let response = await fetch(\"/api/User\");\r\n    let body = await response.json();\r\n    upDateData(body);\r\n  }\r\n\r\n  if (firstLoad) {\r\n    sampleFunc();\r\n    setLoad(false);\r\n  }\r\n\r\n  if (data.length > 0) isLoading = false;\r\n\r\n  return (\r\n    <div className={classes.paper}>\r\n      <Avatar className={classes.avatar}>\r\n        <GroupIcon />\r\n      </Avatar>\r\n      <Typography component=\"h1\" variant=\"h5\">\r\n        User Directory\r\n      </Typography>\r\n\r\n      {isLoading ? (\r\n        <CircularProgress />\r\n      ) : (\r\n        <TableContainer\r\n          style={{ width: \"80%\", margin: \"0 10px\" }}\r\n          component={Paper}\r\n        >\r\n          <Table className={classes.table} aria-label=\"simple table\">\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell align=\"center\">Name</TableCell>\r\n                <TableCell align=\"center\">Company</TableCell>\r\n                <TableCell align=\"center\">Gender</TableCell>\r\n                <TableCell align=\"center\">Dob</TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {data?.map(row => (\r\n                <TableRow key={row.name}>\r\n                  <TableCell align=\"center\">{row.name}</TableCell>\r\n                  <TableCell align=\"center\">{row.company}</TableCell>\r\n                  <TableCell align=\"center\">{row.gender}</TableCell>\r\n                  <TableCell align=\"center\">{row.dob}</TableCell>\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n      )}\r\n      <Link className={classes.link} to=\"/\">\r\n        {\" \"}\r\n        <Typography align=\"left\">\r\n          &#x2190; Head back to save data\r\n        </Typography>{\" \"}\r\n      </Link>\r\n    </div>\r\n  );\r\n}","import React, { Component } from 'react';\nimport AddUser from \"./Components/AddUser\";\nimport { Route, BrowserRouter as Router } from \"react-router-dom\";\nimport Table from \"./Components/Table\";\nimport './App.css';\n\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <Route exact path=\"/\" component={AddUser} />\n        <Route exact path=\"/view\" component={Table} />\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}